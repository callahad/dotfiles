diff --git a/configure.ac b/configure.ac
index 9be29cc..4d65ca7 100644
--- a/configure.ac
+++ b/configure.ac
@@ -412,6 +412,42 @@ AM_CONDITIONAL(BUILD_ID3_LOADER, test "$id3_ok" = yes)
 AC_SUBST(ID3LIBS)
 
 
+AC_MSG_CHECKING(whether to enable webp support)
+AC_ARG_WITH([webp],
+  [AS_HELP_STRING([--without-webp], [Disable WebP image loader])],
+  [
+   if test "$withval" = no ; then
+     webp_loader=no
+   else
+     webp_loader=yes
+   fi
+  ],
+  [ webp_loader=auto ]
+)
+AC_MSG_RESULT($webp_loader)
+
+if test "$webp_loader" != no ; then
+  AC_CHECK_LIB(webp, WebPDecodeRGBA, webp_libs="-lwebp" webp_ok=yes, webp_ok=no)
+  if test "$webp_ok" = yes; then
+    AC_CHECK_HEADER([webp/decode.h], , webp_ok=no)
+    if test "$webp_ok" = yes; then
+      WEBPLIBS=$webp_libs
+    fi
+  fi
+  if test "$webp_ok" = no ; then
+    if test "$webp_loader" = yes ; then
+      AC_MSG_ERROR(WebP support was requested but system does not support it)
+    else
+      AC_MSG_WARN(*** Native WebP support will not be built (WebP not found) ***)
+    fi
+  fi
+else
+  webp_ok=no
+fi
+AM_CONDITIONAL(BUILD_WEBP_LOADER, test "$webp_ok" = yes)
+AC_SUBST(WEBPLIBS)
+
+
 EC_C_WARNINGS()
 EC_C_VISIBILITY(yes)
 
@@ -456,6 +492,7 @@ echo "  JPEG....................: $jpeg_ok"
 echo "  PNG.....................: $png_ok"
 echo "  TIFF....................: $tiff_ok"
 echo "  GIF.....................: $gif_ok"
+echo "  WEBP....................: $webp_ok"
 echo "  ZLIB....................: $zlib_ok"
 echo "  BZIP2...................: $bz2_ok"
 echo "  ID3.....................: $id3_ok"
diff --git a/src/modules/loaders/Makefile.am b/src/modules/loaders/Makefile.am
index 40e2257..c1fab32 100644
--- a/src/modules/loaders/Makefile.am
+++ b/src/modules/loaders/Makefile.am
@@ -26,6 +26,9 @@ endif
 if BUILD_ID3_LOADER
 ID3_L                = id3.la
 endif
+if BUILD_WEBP_LOADER
+WEBP_L               = webp.la
+endif
 
 pkg_LTLIBRARIES      = \
 $(JPEG_L) \
@@ -42,7 +45,8 @@ bmp.la \
 ff.la \
 xpm.la \
 tga.la \
-lbm.la
+lbm.la \
+$(WEBP_L)
 
 EXTRA_DIST = loader_common.h
 
@@ -116,3 +120,8 @@ lbm_la_SOURCES       = loader_lbm.c
 lbm_la_LDFLAGS       = -module -avoid-version
 lbm_la_LIBADD        = $(top_builddir)/src/lib/libImlib2.la
 lbm_la_LIBTOOLFLAGS = --tag=disable-static
+
+webp_la_SOURCES      = loader_webp.c
+webp_la_LDFLAGS      = -module -avoid-version
+webp_la_LIBADD       = @WEBPLIBS@ $(top_builddir)/src/lib/libImlib2.la
+webp_la_LIBTOOLFLAGS = --tag=disable-static
diff --git a/src/modules/loaders/loader_webp.c b/src/modules/loaders/loader_webp.c
new file mode 100644
index 0000000..ce5a1ea
--- /dev/null
+++ b/src/modules/loaders/loader_webp.c
@@ -0,0 +1,205 @@
+/* File: loader_webp.c
+   Time-stamp: <2012-12-09 21:19:30 gawen>
+
+   Copyright (c) 2011 David Hauweele <david@hauweele.net>
+   All rights reserved.
+
+   Redistribution and use in source and binary forms, with or without
+   modification, are permitted provided that the following conditions
+   are met:
+   1. Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+   2. Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+   3. Neither the name of the University nor the names of its contributors
+      may be used to endorse or promote products derived from this software
+      without specific prior written permission.
+
+   THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+   ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+   SUCH DAMAGE. */
+
+#define _BSD_SOURCE 1
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fcntl.h>
+
+#include <webp/decode.h>
+#include <webp/encode.h>
+
+#include "loader_common.h"
+
+static uint8_t * read_file(const char *filename, size_t *size,
+                           ImlibProgressFunction progress)
+{
+  struct stat buf;
+  uint8_t *data = NULL;
+  int fd;
+
+#ifndef __EMX__
+  if((fd = open(filename, O_RDONLY)) < 0)
+#else
+  if((fd = open(filename, O_RDONLY | O_BINARY)) < 0)
+#endif
+    return NULL;
+
+  if(fstat(fd, &buf) < 0 ||
+     !(data = malloc(buf.st_size)))
+    goto EXIT;
+
+  *size = read(fd, data, buf.st_size);
+
+EXIT:
+  close(fd);
+  return data;
+}
+
+char load(ImlibImage * im, ImlibProgressFunction progress,
+          char progress_granularity, char immediate_load)
+{
+  uint8_t *data;
+  size_t size;
+  int w,h;
+  int has_alpha;
+#if (WEBP_DECODER_ABI_VERSION >= 0x200)
+  WebPBitstreamFeatures features;
+#endif
+  char ret = 0;
+
+  if(im->data)
+    return 0;
+
+  if(!(data = read_file(im->real_file, &size, progress)))
+    return 0;
+
+#if (WEBP_DECODER_ABI_VERSION >= 0x200)
+  if(WebPGetFeatures(data, size, &features) != VP8_STATUS_OK)
+    goto EXIT;
+  w = features.width;
+  h = features.height;
+  has_alpha = features.has_alpha;
+#else /* compatibility with versions <= 0.1.3 */
+  if (!WebPGetInfo(data, size, &w, &h))
+    goto EXIT;
+  has_alpha = 0;
+#endif
+
+  if(!im->loader && !im->data) {
+    im->w = w;
+    im->h = h;
+
+    if(!IMAGE_DIMENSIONS_OK(w, h))
+      goto EXIT;
+
+    if(!has_alpha)
+      UNSET_FLAG(im->flags, F_HAS_ALPHA);
+    else
+      SET_FLAG(im->flags, F_HAS_ALPHA);
+    im->format = strdup("webp");
+  }
+
+  if((!im->data && im->loader) || immediate_load || progress)
+     im->data = (DATA32*)WebPDecodeBGRA(data, size, &w, &h);
+
+  if(progress)
+    progress(im, 100, 0, 0, 0, 0);
+
+  ret = 1;
+
+EXIT:
+  free(data);
+  return ret;
+}
+
+char save(ImlibImage *im, ImlibProgressFunction progress,
+          char progress_granularity)
+{
+  ImlibImageTag *tag;
+  uint8_t *data;
+  float fqual;
+  size_t size;
+  int fd;
+  int quality = 75;
+  char ret = 0;
+
+  if(!im->data)
+    return 0;
+
+#ifndef __EMX__
+  if((fd = open(im->real_file, O_WRONLY | O_CREAT,
+                S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH)) < 0)
+#else
+  if((fd = open(im->real_file, O_WRONLY | O_CREAT | O_BINARY,
+                S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH)) < 0)
+#endif
+    return 0;
+
+  /* look for tags attached to image to get extra parameters like quality
+     settings etc. - this is the "api" to hint for extra information for
+     saver modules */
+  tag = __imlib_GetTag(im, "compression");
+  if(tag) {
+    int compression = tag->val;
+
+    if(compression < 0)
+      compression = 0;
+    else if(compression > 9)
+      compression = 9;
+
+    quality = (9 - compression) * 10;
+    quality = quality * 10 / 9;
+  }
+  tag = __imlib_GetTag(im, "quality");
+  if(tag) {
+    quality = tag->val;
+
+    if(quality < 1)
+      quality = 1;
+    else if(quality > 100)
+      quality = 100;
+  }
+
+  fqual = (float)quality;
+
+  if(!(size = WebPEncodeBGRA((const uint8_t *)im->data, im->w, im->h,
+                             im->w << 2, fqual, &data)))
+    goto EXIT;
+
+  if(write(fd, data, size) != size)
+    goto EXIT;
+
+  if(progress)
+    progress(im, 100, 0, 0, 0, 0);
+
+  ret = 1;
+
+EXIT:
+  close(fd);
+  if(data)
+    free(data);
+  return ret;
+}
+
+void formats(ImlibLoader *l)
+{
+  int i;
+  char *list_formats[] = { "webp" };
+
+  l->num_formats = (sizeof(list_formats) / sizeof(char *));
+  l->formats     = malloc(sizeof(char *) * l->num_formats);
+  for(i = 0 ; i < l->num_formats ; i++)
+    l->formats[i] = strdup(list_formats[i]);
+}
